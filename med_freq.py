# -*- coding: utf-8 -*-
"""med freq

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DAj6AYxuWMZdKOU570c1W_EctvCI9UHf
"""

import pandas as pd
import re

df = pd.read_csv("/content/drive/MyDrive/research/prescriptions.csv")
df_other = pd.read_csv("/content/drive/MyDrive/research/allICD-2.csv")


# make drug name consistent
df['drug'] = df['drug'].str.upper().str.strip()


df['prod_strength'] = df['prod_strength'].fillna("")

# formats to remove to remove
df['drug'] = df['drug'].str.replace(r"\*(NF|NON-FORMULARY|OB|DC)\*\s*", "", regex=True)
df['drug'] = df['drug'].str.replace(r"\*NON-FORMULARY\*", "", regex=True)
df['drug'] = df['drug'].str.replace(r"\s*\(.*?\)", "", regex=True)
df['drug'] = df['drug'].str.strip()
df['drug'] = df['drug'].str.replace(r"\s*\d+(\.\d+)?\s*%$", "", regex=True).str.strip()


# no use words
form_keywords = [
    "TABLET", "CAPSULE", "INJECTION", "ORAL SOLUTION", "SOLUTION", "SUSPENSION",
    "SYRINGE", "VIAL", "PATCH", "BAG", "SPRAY", "CREAM", "OINTMENT", "SUPPOSITORY",
    "DROPPER", "DISKUS", "DEVICE", "LOZENGE", "TUBE", "ELIXIR", "LIQUID", "NEBULIZER"
]

def strip_formulations(drug):
    if not isinstance(drug, str):
        return "UNKNOWN"
    drug = drug.upper()
    for form in form_keywords:
        drug = drug.replace(form, "")
    return drug.strip()

df['drug'] = df['drug'].apply(strip_formulations)

# known abbreviations/typos
corrections = {
    "ABACAV": "ABACAVIR",
    "POTASSIUM CHL": "POTASSIUM CHLORIDE",
    "LIDOCAINE" : "LIDOCAINE"
}

df['drug'] = df['drug'].replace(corrections)

# extract does function
def extract_dose_string(ps):
    if not isinstance(ps, str):
        return "UNKNOWN"

    ps = ps.lower().strip()

    # dose/unit patterns
    match = re.search(r'(\d+\.?\d*)\s*(mg|mcg|g|gram|grams|ml|mL|iu|units|mEq|%)', ps, re.IGNORECASE)
    if match:
        number = match.group(1)
        unit = match.group(2).replace("grams", "g").replace("gram", "g")
        return f"{number}{unit}".upper()

    #values like 100 Units / mL
    match_fraction = re.search(r'(\d+\.?\d*)\s*/\s*(\d+\.?\d*)\s*(mg|mcg|ml|mL|units)', ps, re.IGNORECASE)
    if match_fraction:
        return f"{match_fraction.group(1)}/{match_fraction.group(2)}{match_fraction.group(3)}".upper()

    return "UNKNOWN"

df['dose'] = df['prod_strength'].apply(extract_dose_string)

#mapping numeric frequency to labeled frequencies
def frequency_label(doses):
    try:
        doses = int(float(doses))  # convert safely to int
        reverse_map = {
            0: "NA",
            1: "OD",
            2: "BID",
            3: "TID",
            4: "QID",
            5: "FID",
            6: "Q4H",
            7: "SID",
            8: "Q3H",
            9: "NID",
            10: "TENID",
            11: "Q2H",
            12: "TWID",
            20: "twentID",
            24: "Q1H"
        }
        return reverse_map.get(doses, "OTHER")
    except:
        return "NA"

def frequency_code(doses):
    try:
        doses = int(float(doses))
        return {
            0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 20: 20, 24: 24
        }.get(doses, 0)
    except:
        return 0

df['frequency'] = df['doses_per_24_hrs'].apply(frequency_label)
df['freq_code'] = df['doses_per_24_hrs'].apply(frequency_code)

# creation of the frequency matrix
accepted_freqs = ["NA","OD", "BID", "TID", "QID","FID","Q4H","SID","Q3H","NID","TENID","Q2H","TWID","twentID","Q1H"]
freq_map = {
    "NA": 0,
    "OD": 1,
    "BID": 2,
    "TID": 3,
    "QID": 4,
    "FID": 5,
    "Q4H": 6,  # every 4 hours = 6 per 24
    "SID": 7,
    "Q3H": 8,  # every 3 hours = 8 per 24
    "NID": 9,
    "TENID": 10,
    "Q2H": 11, # every 3 hours = 12 per 24hrs
    "TWID": 12,
    "twentID": 20,
    "Q1H": 24, # every hour = 24 per p24
}


# function to clean and categorize frequencies
def categorize_frequency(value):
    try:
        val = str(value).strip().upper()
        if val in ["", "NA", "N/A", "PLEASE SELECT AN OPTION"]:
            return "NA"
        elif val in accepted_freqs:
            return val
        else:
            return "OTHER"
    except:
        return "NA"

df['frequency_clean'] = df['frequency'].apply(categorize_frequency)
df['freq_code'] = df['frequency_clean'].map(freq_map)


df['med_dose'] = df['drug'].str.replace(r"\W+", "", regex=True) + "_" + df['dose'].str.replace(" ", "")

# getting freq code
freq_grouped = df.groupby(['subject_id', 'hadm_id', 'med_dose'])['freq_code'].max().reset_index()

# matrix formation
freq_matrix = freq_grouped.pivot(index=['subject_id', 'hadm_id'], columns='med_dose', values='freq_code')\
                           .fillna(0).astype(int).reset_index()

freq_matrix.to_csv("/content/drive/MyDrive/research/medication_frequency_matrix-5.csv", index=False)